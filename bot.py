from flask import Flask, request
from googletrans import Translator
import random
import time

from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
from geopy.geocoders import Nominatim

from api_calls import post_pschat_message
from api_calls import weather_message

from helpers.conversational_agent import init_conversational_agent
from helpers.embedding_model import init_embedding_model
from helpers.vectorstore import create_vector_store, init_vectordb
from helpers.similarity_calculation import find_highest_similarity
from helpers.attraction import *

from googletrans import Translator

from helpers.list import similarity_score

app = Flask(__name__)
translator = Translator()
account_sid = 'AC881b7aba44288679bf6c1f16f980d16e'
auth_token = 'd2b5cc488ebddfb19eb582b248395bff'

def setup_langchain_bot():
    embedding_model = init_embedding_model()
    init_vectordb()
    vectorstore = create_vector_store(
        "text", "langchain-retrieval-agent", embedding_model
    )
    qabot = init_conversational_agent(vectorstore)
    return qabot, vectorstore

with app.app_context():
    qabot, pinecone_vectorstore = setup_langchain_bot()

def start_msg():
    account_sid = 'AC5687c57a299c34a003f9a010b1cca3e7'
    auth_token = 'e20fb8901b10d87407ced53b6da1c167'
    client = Client(account_sid, auth_token)
    client.messages.create(from_='whatsapp:+14155238886',
                        to='whatsapp:+14074054671',
                        body='Welcome to Tourista!!')

def location(lat, long):
    geolocator = Nominatim(user_agent="bot.py")
    coords = str(lat) + ", " + str(long)
    location = geolocator.reverse(coords, timeout = None)
    raw_location = location.raw['address']
    city_loc = raw_location['city'] + ", " + raw_location['state'] + ", " + raw_location['country']
    address_loc = raw_location['house_number'] + " " + raw_location['road'] + ", " + raw_location['city']
    return city_loc, address_loc
    
@app.route('/bot', methods=['POST'],)

def bot():
    user_phone_number = request.values.get("From")
    incoming_msg = request.values.get('Body','').lower()
    # weather information
    longitude = request.values.get('Longitude','').lower()
    latitude = request.values.get('Latitude','').lower()
    resp = MessagingResponse()
    msg = resp.message()
    # buff = resp.message()

    response = None
    data = None
    docs_and_scores = pinecone_vectorstore.similarity_search_with_score(incoming_msg)
    highest_similarity = find_highest_similarity(docs_and_scores)

    # detection = translator.detect(incoming_msg)
    # #detects user lang
    # user_lang = detection.lang.lower()
    # # translates user msg into english
    # trans_msg = translator.translate(incoming_msg, dest = "en").text
    # #print(trans_msg)

    if similarity_score("tour", incoming_msg)>0.7:
        response="Hello, I am your virtual tour guide, Tourista! Please type HELLO in the langauge you would like to communicate in."
        # asks for location and processes location info
        # where MongoDB user object is populated
        #   list is generated by serpAPI or knowledge base/gpt
        #   user location from WhatsApp is stored

    elif similarity_score("hello", incoming_msg)>0.7:
        #print("inside hello")
        response = "Before we start the tour, send your location! Press the + button on your keyboard to send us your pin!"
        # #print langauge in the console to check this response

    elif latitude != "" and longitude != "":
        # city_loc = "<city>, <state>, <country>"
        # address_loc = "<number> <street>, <city>"
        city_loc, address_loc = location(latitude, longitude)
        user_loc = {'lat': float(latitude), 'long': float(longitude), 'street_address': address_loc}
        api_url = "http://localhost:4000"
        api_request_headers  = {"Content-Type": "application/json"}
        user_update_location = requests.patch(
        f"{api_url}/api/users/{user_phone_number}/location",
            headers=api_request_headers,
            data=json.dumps({'location': user_loc})
            )
        five_attractions, loc_dict = generate_tour(city_loc, user_loc, user_phone_number)
        response = weather_message(latitude, longitude)
        resp.message("One moment! Generating your tour . . . ")
        time.sleep(1)
        tour_message = "Here is a summary of your tour: \n"
        for i in range(len(five_attractions)):
            tour_message += f"\n {i+1}. {five_attractions[i]}"
        tour_message += "\n\n Follow this link for the footpath of the tour: \n" + str(maps_link(loc_dict, user_loc))
        tour_message += "\n Message me when you're at the location and when you're ready for the next. Feel free to ask me for more information about a certain location!"
        # tour_message = "Attractions: " + str(five_attractions) + "\n link: " + str(maps_link(loc_dict, user_loc))
        resp.message(tour_message)
    
    elif similarity_score('here', incoming_msg) > 0.7:
        attraction = remove_first(user_phone_number)
        #print(attraction + " line 87")
        if(str(attraction) != "error"):
            client = Client(account_sid, auth_token)
            message = client.messages.create(
                from_='whatsapp:+14155238886',
                body="Awesome! Finding some fun facts about " + str(attraction) + " for you...",
                to= user_phone_number
                )
            # msg2 = resp2.message()
            # msg2.body("Awesome! Here are some fun facts about " + str(attraction) + ".")
            area_query = "3 fun facts about" + str(attraction)
            doc_and_score = pinecone_vectorstore.similarity_search_with_score(area_query)
            higher_similarity = find_highest_similarity(doc_and_score)
            # ask chatgpt or knowledge base depending on similarity
            if higher_similarity >= 0.5:
                area_info = qabot.run(area_query)
            else:
                area_info = post_pschat_message(area_query)
            response = area_info
            msg2 = resp.message()
            msg2.body("Ask me to go to the next location whenever you're ready!")
            # message = client.messages.create(
            #     from_='whatsapp:+14155238886',
            #     body="Ask me to go to the next location whenever you're ready!",
            #     to= user_phone_number
            #     )
        else:
                client = Client(account_sid, auth_token)
                message = client.messages.create(
                    from_='whatsapp:+14155238886',
                    body="No more areas, but you can always start a new tour or chat with me.",
                    to= user_phone_number
                    )
    elif similarity_score("next", incoming_msg)>0.7:
        
        if tour_done(user_phone_number):
            response = f"Your tour of {get_city(user_phone_number)} is complete! Thank you for using Tourista! Feel free to ask me more questions"
        else: 
            place = view_place(user_phone_number)
            title = place.get("title", "error")
            cords = place.get("coordinates", "")
            addr = cords.get("street_address", "")
            # place_lon = cords.get("longitude", 0.0)
            # place_lat = cords.get("latitude", 0.0)
            # geolocator = Nominatim(user_agent="bot.py")
            # cords = str(place_lat) + ", " + str(place_lon)
            # attract_loc = geolocator.reverse(cords, timeout = None)
            # city = attract_loc.raw['address']['city']

            response_begin = ["Let's go to", "Head over to", "Make your way to", "Your next stop is", 
                                "The following location is", "Move towards", "Head towards"]
            response = f'{random.choice(response_begin)} {title}, {addr}'
            time.sleep(1)
            # # map_msg = Message()
            # # map_msg.media(f'https://www.google.com/maps/search/?api=1&query={place_lat},{place_lon}')
            # # map_msg.body(attract_loc.address)
            # resp.append(map_msg)
            next_msg = resp.message()
            next_msg.body('Please let me know when you have arrived or if you want to end the tour.')
        
        
        # pops next from MongoDB, sends to user

    elif similarity_score("exit", incoming_msg)>0.7:
        # clears places stack from MongoDB? clears user from mongoDB?
        response = "Okay! You may start a new tour with \"TOUR\" or ask me some questions."

    # else:
    elif highest_similarity >= 0.5:
        # response = qabot.run(incoming_msg)
        response = qabot.run(incoming_msg)
        # response = "Second"
    else:
        response = post_pschat_message(incoming_msg)

    # response = translator.translate(response, dest = user_lang).text
    msg.body(response)

    #print(response)

    return str(resp)

if __name__ == '__main__':
    app.run(port=5000)