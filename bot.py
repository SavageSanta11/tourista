from flask import Flask, request
from googletrans import Translator
import requests
import json
import spacy
import socket
import subprocess

from twilio.rest import Client
from twilio.twiml.messaging_response import MessagingResponse
from geopy.geocoders import Nominatim

from api_calls import post_pschat_message
from api_calls import weather_message

from helpers.conversational_agent import init_conversational_agent
from helpers.embedding_model import init_embedding_model
from helpers.vectorstore import create_vector_store, init_vectordb
from helpers.similarity_calculation import find_highest_similarity
from helpers.attraction import generate_tour

from googletrans import Translator

from helpers.list import similarity_score

app = Flask(__name__)
translator = Translator()

def setup_langchain_bot():
    embedding_model = init_embedding_model()
    init_vectordb()
    vectorstore = create_vector_store(
        "text", "langchain-retrieval-agent", embedding_model
    )
    qabot = init_conversational_agent(vectorstore)
    return qabot, vectorstore

with app.app_context():
    qabot, pinecone_vectorstore = setup_langchain_bot()
    nlp = spacy.load('en_core_web_md')

def start_msg():
    account_sid = 'AC5687c57a299c34a003f9a010b1cca3e7'
    auth_token = 'e20fb8901b10d87407ced53b6da1c167'
    client = Client(account_sid, auth_token)
    client.messages.create(from_='whatsapp:+14155238886',
                        to='whatsapp:+14074054671',
                        body='Welcome to Tourista!!')

def location(lat, long):
    geolocator = Nominatim(user_agent="bot.py")
    coords = str(lat) + ", " + str(long)
    location = geolocator.reverse(coords, timeout = None)
    raw_location = location.raw['address']
    city_loc = raw_location['city'] + ", " + raw_location['state'] + ", " + raw_location['country']
    address_loc = raw_location['house_number'] + " " + raw_location['road'] + ", " + raw_location['city']
    return city_loc, address_loc
    
@app.route('/bot', methods=['POST'],)

def bot():
    user_phone_number = request.values.get("From")
    incoming_msg = request.values.get('Body','').lower()
    # weather information
    longitude = request.values.get('Longitude','').lower()
    latitude = request.values.get('Latitude','').lower()
    resp = MessagingResponse()
    msg = resp.message()
    # buff = resp.message()

    response = None
    data = None
    docs_and_scores = pinecone_vectorstore.similarity_search_with_score(incoming_msg)
    highest_similarity = find_highest_similarity(docs_and_scores)

    detection = translator.detect(incoming_msg)
    #detects user lang
    user_lang = detection.lang.lower()
    # translates user msg into english
    trans_msg = translator.translate(incoming_msg, dest = "en").text

    if similarity_score("tour", incoming_msg)>0.7:
        response="Hello, I am your virtual tour guide, Tourista! Please type HELLO in the langauge you would like to communicate in."
        # asks for location and processes location info
        # where MongoDB user object is populated
        #   list is generated by serpAPI or knowledge base/gpt
        #   user location from WhatsApp is stored

    elif similarity_score("hello", incoming_msg)>0.7:
        response = "Before we start the tour, send your location! Press the + button on your keyboard to send us your pin!"
        # print langauge in the console to check this response

    elif latitude != "" and longitude != "":
        city_loc, address_loc = location(latitude, longitude)
        five_tour_attractions = generate_tour(address_loc, city_loc, user_phone_number)
        response = weather_message(latitude, longitude)
        msg.body("One moment! Let me think . . . ")
    
    # elif similarity_score("here", incoming_msg)>0.7:
    #     response = "in here statement"
    #     print(here_words_nlp.similarity(incoming_msg_nlp))
    #     # gives info about this location using serpAPI or knowledge base/gpt

    # elif similarity_score("next", incoming_msg)>0.7:
    #     response = "in next statement"
    #     print(next_words_nlp.similarity(incoming_msg_nlp))
        # pops next from MongoDB, sends to user

    # elif similarity_score("exit", incoming_msg)>0.7:
    #     # clears places stack from MongoDB

    # else:
    elif highest_similarity >= 0.5:
        # response = qabot.run(incoming_msg)
        response = qabot.run(incoming_msg)
        # response = "Second"
    else:
        response = post_pschat_message(incoming_msg)

    response = translator.translate(response, dest = user_lang).text
    msg.body(str(response))

    print(response)

    return str(resp)

if __name__ == '__main__':
    app.run(port=5000)